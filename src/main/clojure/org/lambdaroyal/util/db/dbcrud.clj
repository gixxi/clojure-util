;; Aspekt Hilfsfunktionen für Grundlegende Operationen wie
;; Einfügen, Löschen, Update, Records Einfügen mit Id Rückgabe, 
;; Mapping von DB Types auf Java Types
;;
;; Autor: Christian Meichsner

(ns org.lambdaroyal.util.db.dbcrud
  (:require [org.lambdaroyal.util.db.dbconfig :as dbconfig])
  (:require [clojure.java.jdbc :as sql])
  (:import [java.text SimpleDateFormat]
           [org.lambdaroyal.util ConsoleProgress])
  (:import [java.util Date])
  (:import [org.apache.tomcat.jdbc.pool DataSource])
  (:import [org.lambdaroyal.util ConsoleProgress])
	(:gen-class))


;; the following is mostly from
;; http://gist.github.com/373564#file_sql.clj
 
;;==== Internal functions ======================================================
 
(defn- join 
  "Joins the items in the given collection into a single string separated
   with the string separator."
  [separator col]
  (apply str (interpose separator col)))
 
(defn- sql-for-insert 
  "Converts a table identifier (keyword or string) and a hash identifying
   a record into an sql insert statement compatible with prepareStatement
    Returns [sql values-to-insert]"
  [table record]
  (let [table-name (if (instance? clojure.lang.Keyword table) (.getName table) table)
        columns (map #(if (instance? clojure.lang.Keyword %1) (.getName %1) %1) (keys record))
        values (vals record)
        n (count columns)
        template (join "," (replicate n "?"))
        column-names (join "," columns)
        sql (format "insert into %s (%s) values (%s)"
                    table-name column-names template)]
    (do
      [sql values])))

;; Thanks to https://gist.github.com/joodie/373677
(defn insert-record 
  "Equivalent of clojure.contrib.sql/insert-records that only inserts a single
   record but returns the autogenerated id of that record if available."
  [table record]
  (let [[sql values] (sql-for-insert table record)]
    (with-open [statement (.prepareStatement (sql/connection) sql)]
      (doseq [[index value] (map vector (iterate inc 1) values)]
              (.setObject statement index value))
      (.execute statement)
      (let [rs (.getGeneratedKeys statement)]
        (if (.next rs)
          (if-let [id (.getObject rs 1)]
            id
            nil))
          nil)
        nil)))

;; Thanks to http://stackoverflow.com/questions/3632260/clojure-how-to-insert-a-blob-in-database
(defn doPrepared
   "Executes an (optionally parameterized) SQL prepared statement on the
   open database connection. Each param-group is a seq of values for all of
   the parameters. This is a modified version of clojure.contrib.sql/do-prepared
   with special handling of byte arrays."
   [sql & param-groups]
   (with-open [stmt (.prepareStatement (sql/connection) sql)]
     (doseq [param-group param-groups]
       (doseq [[index value] (map vector (iterate inc 1) param-group)]
         (cond 
           (= (class value) (class (.getBytes "")))
           (.setBytes stmt index value)
           (= (class value) java.io.ObjectInputStream)
           (.setBlob stmt index value)
           :else
           (.setObject stmt index value)))
       (.addBatch stmt))
     (sql/transaction
      (seq (.executeBatch stmt)))))

;;
;; Hilfsfunktionen für das Mapping auf Zieldatentypen
;;
(defn doubleStringToLong [x]
  "rundet die Double Interpretation von x"
  (Math/round (Double/parseDouble (.trim x))))

(defn stringToInt [x] 
  (cond (nil? x) nil
        (= "" x) nil
        :else (java.lang.Integer/parseInt (.trim x))))

(defn stringToString [x] (.trim x))

(defn ^Date parse-date
  [s fm]
  (.parse (SimpleDateFormat. fm) s))

(defn stringToNumber [x f]
  "Parses the number string <x> using format <f> (DecimalFormat)"
  (let [formatter (new java.text.DecimalFormat f)]
    (.parse formatter (.trim x))))

(defn stringToNumberDouble [x f]
  (.doubleValue (stringToNumber x f)))

(defn stringToNumberLong [x f]
  (.longValue (stringToNumber x f)))

(defn stringToDecimal 
  ([x] 
   "Wandelt einen String _unreflektiert_ in eine BigDecimal um"
   (new java.math.BigDecimal (.trim x)))
  ([x ^String f ^Integer s ^java.math.RoundingMode r]
   "Wandelt einen String zuerst per stringToNumberDouble in eine Gleitkommazahl um
   und anschliessend wird eine Scalierung auf <s> Nachkommastellen mit einem Rundung r vorgenommen"
   (.setScale (new java.math.BigDecimal (stringToNumberDouble x f)) s r)))

(defn select [^DataSource datasource select]
  "Gibt den letzten record zurück, welcher durch ein select geliefert wird"
  (sql/with-connection {:datasource datasource}
    (sql/with-query-results
      res [select]
      (into {} res))))
